using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace prueba
{
    internal class Bezier
    {
        private float size;
        private float points;
        public Bezier()
        {
            size = 0f;
            points = 0f;
        }

        public void ReadData(TextBox txtSize, TextBox txtPoints)
        {
            try
            {
                size = float.Parse(txtSize.Text);
                points = float.Parse(txtPoints.Text);
            }
            catch
            {
                MessageBox.Show("Error reading data, verify width and height values");
            }
        }

        public void Draw(PictureBox picCanvas)
        {
            Graphics g = picCanvas.CreateGraphics();
            float steps = size / points;
            float centerX = picCanvas.Width / 2;
            float centerY = picCanvas.Height / 2;

            float x1 = centerX;
            float y1 = centerY - size;
            float x2 = centerX;
            float y2 = centerY;

            for (float i = centerY - size; i <= centerY; i += steps)
            {
                g.DrawLine(Pens.Red, x1, y1, x2, y2);
                g.DrawLine(Pens.Red, x1, y1 + size, x2 - size, y2);
                x2 = x2 + steps;
                y1 = y1 + steps;
            }

            x1 = centerX;
            y1 = centerY - size;
            x2 = centerX;
            y2 = centerY;

            for (float i = centerY - size; i <= centerY; i += steps)
            {
                g.DrawLine(Pens.Red, x1, y1, x2, y2);
                g.DrawLine(Pens.Red, x1, y1 + size, x2 + size, y2);
                x2 = x2 - steps;
                y1 = y1 + steps;
            }
        }

        public void DrawRoted(PictureBox picCanvas)
        {
            Graphics g = picCanvas.CreateGraphics();

            float steps = size / points;
            float centerX = picCanvas.Width / 2;
            float centerY = picCanvas.Height / 2;

            float x1 = centerX;
            float y1 = centerY - size;
            float x2 = centerX;
            float y2 = centerY;

            Matrix rotationMatrix = new Matrix();

            rotationMatrix.RotateAt(45, new PointF(centerX, centerY));

            g.Transform = rotationMatrix;

            for (float i = centerY - size; i <= centerY; i += steps)
            {
                g.DrawLine(Pens.Green, x1, y1, x2, y2);
                g.DrawLine(Pens.Green, x1, y1 + size, x2 - size, y2);
                x2 = x2 + steps;
                y1 = y1 + steps;
            }

            x1 = centerX;
            y1 = centerY - size;
            x2 = centerX;
            y2 = centerY;

            for (float i = centerY - size; i <= centerY; i += steps)
            {
                g.DrawLine(Pens.Green, x1, y1, x2, y2);
                g.DrawLine(Pens.Green, x1, y1 + size, x2 + size, y2);
                x2 = x2 - steps;
                y1 = y1 + steps;
            }
        }
    }
}
